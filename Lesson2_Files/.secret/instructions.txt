Lesson 2: Files
====================

In this lesson, you'll learn to manipulate files: creating, deleting,
moving, and copying. Unlike the last lesson, where you moved around
between various files and directories, most of your instructions for
this lesson are contained within this file.

If you have the ability to, I'd recommend opening this file in a
second terminal window to keep it open while you work.

-----------------------------

Our project for this lesson is going to be a working terminal version
of space invaders. Fortunately for us, all the necessary files have
already been written. Unfortunately for us, some yahoo went and 
scrambled all of them. We'll need to piece things back together if 
we want to be able to run the game.

NOTE: While you work through the exercises in this directory, try
to keep the directory structure in your head (it can get challenging).
If the `tree` program is installed on your system, you can use it
to get a graphical overview of your file structure.

-----------------------------

There are several commands that we'll be covering below. I've listed them here
so that you can have a quick all-in-one reference.

        mkdir <name>
        rmdir <name>
        mv <file1> <file2>
        cp <file1> <file2>
        rm <file>
        touch <file>

`mkdir` makes a new directory of the given name
`rmdir` removes an *empty* directory
`mv` takes a file from file1 and places it at the path given by file2
`cp` copies a file from file1 to file2
`rm` removes a file. No take-backsies!
`touch` creates an empty file


####  Step 1: Make a home for the files  ####

We could extract the files directly, but it'd be very messy to have
a bunch of code running around. Instead, let's first make a *directory*
to store the code in. You can make a directory as follows:

        mkdir code_dir

Feel free to replace `code_dir` with any name of your choice.



####  Step 2: Extract files  ####

The code files are located in the space_invaders.tar.gz archive. These
archives, commonly refer to as "tarballs," are the standard file archive
on UNIX systems (much like .zip is standard on Windows). You can extract
a tarball with the `tar` command. Remember: don't type out the full
filenames--use TAB-completion instead!

        tar xvzf space_invaders.tar.gz -C code_dir

The `xvzf` tells `tar` what type of operation to perform (in this case,
extracting a compressed tarball), and the `-C` flag tells tar where
to put the resulting files.

Now, cd into the code_dir directory.



#### Step 3: Where are all the files? ####

We don't know where all the files are! Fortunately, we can get a good
overview with the following command:

        ls *

We will need all the .c files in the main directory in order to
make the game.



#### Step 4: Remove the empty directory ####

You should have noticed in the previous step that the directory
`pullapolooza` has no files in it (if you didn't see this, run
`ls *` again). We can remove that directory right now with the
`rmdir` command.


#### Step 5: Move a files to the right place ####

There's one .c file in each of the remaining two directories. We need
to somehow move them up to the code_dir directory. 

Use either `mv` or `cp` to move the .c files from the remaining two directories
to this one. Remeber to use TAB-completion, and remember that `.` refers to the
current directory!



#### Step 6: Rename a file ####

Run `ls` to see all your files. There should be two .c files and a .cc file.

That .cc file is actually a typo. It should be a .c file. Use the `mv` command
to rename the file (yes, it serves as both a moving and renaming tool!)



#### Step 7: Create a new file ####

For some reason, the designer for this code decided that we need to have a file
called "derp.c" on hand even though it doesn't do anything. Oh well. The 
simplest way to create an empty file is by using `touch`. Go ahead and `touch`
derp.c.


#### Step 8: Ready to rumble! ####

Woo! Now we can finally compile the damn game! Run the `make` command to 
make a file called "space" that contains the game.

#### Step 9: Play the game! ####

In order to play the game, you'll need to tell the command line to run the
executable. To do that, type in `./space` on the prompt.

Once you're done having fun, you should clean the place up. Use the `rm`
command to remove all the .o files generated by the compilation (use `ls`
to see them). Once you're done, head back up until you find the "summary.txt"
file left in the main directory of this lesson.














































































                       ________
                 , -‘”          ``~ ,
              , -”                  “- ,
             ,/                       ”:,
          ,?                           \,
         /                            ,}
         /                          ,:`^` }
        /                         ,:”    /
       ?   __                    :`    /
       /__ (   “~-,_              ,:`      /
      /(_  ”~,_     “~,_          ,:`    _/
      {  _$;_   ”=,_    “-,_   , -~-,}, ~”;/    }
      ((   *~_    ”=- _   “;,, /`  /”    /     /
       \`~,    “~ ,           `   }        /
      (   `=-,,    `             (   ;_,,-”
       / `~,    `-                 \  /\
      \`~ *-,                   |, /     \,__
,,_     } >- _\                  |        `=~-,
   `=~-,_\_   `\,                 \
          `=~-,, \,                \
                `:,,             `\        __
                   `=-,          ,%`>--==``
                    _\      _,-%     `\

Come on, we've been over this already.....use `less`!

LESS IS MORE!

P.S. You might have forgotten to not use cat but...you *ARE* 
TAB-completing...right?
