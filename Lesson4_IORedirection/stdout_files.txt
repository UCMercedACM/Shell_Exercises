So we have these stdin and stdout pipes we can redirect. So what?

Well, we don't just have to redirect them to other terminals or printers. We
can also tell stdout to go to a file. That way, it records everything that would
normally be printed to the screen.

                      stdout
     ________________________________________________________
     |                                                      |
     |                       X                              |
_____|____           ________|_______                 ______|______
|     o  |          |                |                |           |
|        |          |    Monitor     |                |   File    |
|Computer|          |                |                |___________|
|        |          |________________|
|________|               ____|____


                  ========================
                   stdout going to a file
                  ========================

To do this, we simply type a `>` and then the filename we want things to go
to. For instance, if we want to record the list of files in our current
directory, we type

    ls > currentfiles.txt

BE CAREFUL WHEN DOING THIS! The single redirect `>` will OVERWRITE anything
in that file! Accidentally redirected to your ssh keys? You can kiss them
goodbye.

If you want to append to a file instead of overwriting it, you can use a
double symbol, `>>`. This will write to the end of the file instead of
overwriting everything.

FUN FACT: If you need to create a file with a single line in it, it's often
faster to echo that line and then redirect it instead of opening it in a text
editor: just run `echo "a line of text" > newfile.txt`

Try playing around with a file by redirecting the output of `ls`. Try
getting multiple copies of the information and overwriting it. Once
you understand what's going on, cd into fileredirects.
